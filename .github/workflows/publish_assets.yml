# on:
#   release:
#     types: [created]
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload release assets after release is created
jobs:
  build:
    name: build binaries
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.x
      - name: Checkout code
        uses: actions/checkout@v2
      - name: build
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          GOOS=windows GOARCH=amd64 go build -o bin/ci-test-windows-amd64.exe cmd/main.go
          GOOS=linux   GOARCH=amd64 go build -o bin/ci-test-linux-amd64 cmd/main.go
          GOOS=darwin  GOARCH=amd64 go build -o bin/ci-test-macos-amd64 cmd/main.go
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: binaries
          path: bin/

  upload:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - uses: actions/checkout@v1
      - name: Checkout code
        uses: actions/checkout@v2

        # outputs all commits since last tag to file
        # if changes.txt exist and length greater than 0
      - name: Get Latest Commits Since Last Tag
        run: |
          git log $(git describe --tags --abbrev=0)..HEAD --oneline > changes.txt
          if [ -s changes.txt ]
          then
              echo "Changes from last tag is"
              cat changes.txt
          else
              echo "Getting Changes from git log, first tag"
              git log > changes.txt
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: docs/changelog/latest_changes.md
          draft: false
          prerelease: false

      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: binaries
          path: bin/

      - name: Create asset zips
        env:
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}
        run: |
          mkdir assets
          zip assets/ci-test-${SOURCE_TAG}-windows-amd64.zip bin/ci-test-windows-amd64.exe README.md
          zip assets/ci-test-${SOURCE_TAG}-linux-amd64.zip bin/ci-test-linux-amd64 README.md
          zip assets/ci-test-${SOURCE_TAG}-darwin-amd64.zip bin/ci-test-darwin-amd64 README.md
          sha256sum assets/*zip > assets/SHASUMS256.txt
      - name: Upload release assets
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          args: './assets/*'